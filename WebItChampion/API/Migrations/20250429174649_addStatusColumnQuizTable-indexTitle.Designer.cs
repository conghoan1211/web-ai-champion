// <auto-generated />
using System;
using API.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Migrations
{
    [DbContext(typeof(Sep490Context))]
    [Migration("20250429174649_addStatusColumnQuizTable-indexTitle")]
    partial class addStatusColumnQuizTableindexTitle
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("API.Models.Class", b =>
                {
                    b.Property<string>("ClassID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("TeacherID")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ClassID");

                    b.HasIndex("TeacherID");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("API.Models.ClassMembership", b =>
                {
                    b.Property<string>("MembershipID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ClassID")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("StudentID")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("MembershipID");

                    b.HasIndex("StudentID");

                    b.HasIndex("ClassID", "StudentID")
                        .IsUnique();

                    b.ToTable("ClassMemberships");
                });

            modelBuilder.Entity("API.Models.ClassQuiz", b =>
                {
                    b.Property<string>("ClassQuizID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ClassID")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("QuizID")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("ClassQuizID");

                    b.HasIndex("QuizID");

                    b.HasIndex("ClassID", "QuizID")
                        .IsUnique();

                    b.ToTable("ClassQuizzes");
                });

            modelBuilder.Entity("API.Models.ExerciseCode", b =>
                {
                    b.Property<string>("ExerciseID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DifficultyLevel")
                        .HasColumnType("int");

                    b.Property<string>("InputFormat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MaxMemoryLimit")
                        .HasColumnType("int");

                    b.Property<int?>("MaxTimeLimit")
                        .HasColumnType("int");

                    b.Property<string>("OutputFormat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SampleInput")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SampleOutput")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TestCases")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("TopicID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ExerciseID");

                    b.HasIndex("TopicID");

                    b.ToTable("Exercises");
                });

            modelBuilder.Entity("API.Models.Leaderboard", b =>
                {
                    b.Property<string>("LeaderboardID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Period")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.Property<float>("Score")
                        .HasColumnType("real");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("LeaderboardID");

                    b.HasIndex("UserID");

                    b.ToTable("Leaderboards");
                });

            modelBuilder.Entity("API.Models.LearningProgress", b =>
                {
                    b.Property<string>("ProgressID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExerciseID")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("QuizID")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<float?>("Score")
                        .HasColumnType("real");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("TimeSpent")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("ProgressID");

                    b.HasIndex("ExerciseID");

                    b.HasIndex("QuizID");

                    b.HasIndex("UserID");

                    b.ToTable("LearningProgresses");
                });

            modelBuilder.Entity("API.Models.LearningResource", b =>
                {
                    b.Property<string>("ResourceID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ContentURL")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("TopicID")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ResourceID");

                    b.HasIndex("TopicID");

                    b.ToTable("LearningResources");
                });

            modelBuilder.Entity("API.Models.Notification", b =>
                {
                    b.Property<string>("NotificationID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("RelatedID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("NotificationID");

                    b.HasIndex("UserID");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("API.Models.Quiz", b =>
                {
                    b.Property<string>("QuizID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("DifficultyLevel")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("TimeLimit")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("TopicID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("QuizID");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.HasIndex("TopicID");

                    b.HasIndex("UserID");

                    b.ToTable("Quizzes");
                });

            modelBuilder.Entity("API.Models.QuizQuestion", b =>
                {
                    b.Property<string>("QuestionID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CorrectAnswer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreateAt");

                    b.Property<int>("DifficultyLevel")
                        .HasColumnType("int");

                    b.Property<string>("Explanation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAICreated")
                        .HasColumnType("bit")
                        .HasColumnName("IsAICreated");

                    b.Property<string>("Options")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuestionType")
                        .HasColumnType("int");

                    b.Property<string>("QuizID")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("QuestionID");

                    b.HasIndex("QuizID");

                    b.ToTable("QuizQuestions");
                });

            modelBuilder.Entity("API.Models.QuizSubmission", b =>
                {
                    b.Property<string>("QuizSubmissionID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Feedback")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<string>("QuestionID")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("QuizID")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<float?>("Score")
                        .HasColumnType("real");

                    b.Property<DateTime>("SubmitAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserAnswer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("QuizSubmissionID");

                    b.HasIndex("QuestionID");

                    b.HasIndex("QuizID");

                    b.HasIndex("UserID", "QuizID")
                        .HasDatabaseName("IX_QuizSubmission_UserID_QuizID");

                    b.ToTable("QuizSubmissions");
                });

            modelBuilder.Entity("API.Models.SocialComment", b =>
                {
                    b.Property<string>("CommentID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("SocialPostID")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("CommentID");

                    b.HasIndex("SocialPostID");

                    b.HasIndex("UserID");

                    b.ToTable("SocialComments");
                });

            modelBuilder.Entity("API.Models.SocialLike", b =>
                {
                    b.Property<string>("LikeID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("SocialPostID")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UserId1")
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("LikeID");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId1");

                    b.HasIndex("SocialPostID", "UserId")
                        .IsUnique();

                    b.ToTable("SocialLikes");
                });

            modelBuilder.Entity("API.Models.SocialPost", b =>
                {
                    b.Property<string>("SocialPostID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("MediaURL")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("SocialPostID");

                    b.HasIndex("UserID");

                    b.ToTable("SocialPosts");
                });

            modelBuilder.Entity("API.Models.StudentSkill", b =>
                {
                    b.Property<string>("SkillID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsCoreSkill")
                        .HasColumnType("bit");

                    b.Property<string>("SkillName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("TopicID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("SkillID");

                    b.HasIndex("TopicID");

                    b.HasIndex("UserId");

                    b.HasIndex("SkillID", "TopicID");

                    b.HasIndex("SkillName", "TopicID")
                        .IsUnique()
                        .HasFilter("[TopicID] IS NOT NULL");

                    b.ToTable("StudentSkills");
                });

            modelBuilder.Entity("API.Models.StudentSkillProgress", b =>
                {
                    b.Property<string>("ProgressID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<int>("Attempts")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<float>("ProbabilityKnown")
                        .HasColumnType("real");

                    b.Property<float?>("ProficiencyScore")
                        .HasColumnType("real");

                    b.Property<string>("SkillID")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<int?>("SkillLevel")
                        .HasColumnType("int");

                    b.Property<float?>("SuccessRate")
                        .HasColumnType("real");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("ProgressID");

                    b.HasIndex("SkillID");

                    b.HasIndex("UserID");

                    b.ToTable("StudentSkillProgresses");
                });

            modelBuilder.Entity("API.Models.SubmissionCode", b =>
                {
                    b.Property<string>("SubmissionID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ExecutionTime")
                        .HasColumnType("int");

                    b.Property<string>("ExerciseID")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Feedback")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("MemoryUsed")
                        .HasColumnType("int");

                    b.Property<float?>("Score")
                        .HasColumnType("real");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubmitAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("SubmissionID");

                    b.HasIndex("ExerciseID");

                    b.HasIndex("UserID", "ExerciseID")
                        .HasDatabaseName("IX_Submission_UserID_ExerciseID");

                    b.ToTable("Submissions");
                });

            modelBuilder.Entity("API.Models.Topic", b =>
                {
                    b.Property<int>("TopicID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TopicID"));

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("TopicName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("TopicID");

                    b.HasIndex("TopicName")
                        .IsUnique();

                    b.ToTable("Topics");
                });

            modelBuilder.Entity("API.Models.User", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Avatar")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Bio")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime?>("BlockUntil")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DistrictId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("DistrictName")
                        .HasMaxLength(225)
                        .HasColumnType("nvarchar(225)");

                    b.Property<DateTime?>("Dob")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("ExpiryDateToken")
                        .HasColumnType("datetime2");

                    b.Property<string>("FacebookId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("GoogleId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDisable")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastLoginIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Phone")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ProvinceId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ProvinceName")
                        .HasMaxLength(225)
                        .HasColumnType("nvarchar(225)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<int?>("Sex")
                        .HasColumnType("int");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("UserId");

                    b.HasIndex("Email", "Username")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL AND [Username] IS NOT NULL");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("API.Models.UserDailyUsage", b =>
                {
                    b.Property<string>("UsageId")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MaxQuestionsPerDay")
                        .HasColumnType("int");

                    b.Property<int?>("QuestionCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly>("UsageDate")
                        .HasColumnType("date");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("UsageId");

                    b.HasIndex("UserId", "UsageDate")
                        .IsUnique();

                    b.ToTable("UserDailyUsages");
                });

            modelBuilder.Entity("API.Models.UserQuestionHistory", b =>
                {
                    b.Property<string>("HistoryID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<int>("DifficultyLevel")
                        .HasColumnType("int");

                    b.Property<bool>("IsAIGenerated")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<string>("QuestionContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuestionID")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<float?>("Score")
                        .HasColumnType("real");

                    b.Property<string>("SkillID")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime>("SubmitAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("TimeTaken")
                        .HasColumnType("int");

                    b.Property<string>("UserAnswer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("HistoryID");

                    b.HasIndex("QuestionID");

                    b.HasIndex("SkillID");

                    b.HasIndex("UserID");

                    b.ToTable("QuestionHistories");
                });

            modelBuilder.Entity("API.Models.Class", b =>
                {
                    b.HasOne("API.Models.User", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("API.Models.ClassMembership", b =>
                {
                    b.HasOne("API.Models.Class", "Class")
                        .WithMany("Memberships")
                        .HasForeignKey("ClassID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.User", "Student")
                        .WithMany("ClassMemberships")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("API.Models.ClassQuiz", b =>
                {
                    b.HasOne("API.Models.Class", "Class")
                        .WithMany("ClassQuizzes")
                        .HasForeignKey("ClassID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.Quiz", "Quiz")
                        .WithMany("ClassQuizzes")
                        .HasForeignKey("QuizID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("API.Models.ExerciseCode", b =>
                {
                    b.HasOne("API.Models.Topic", "Topic")
                        .WithMany("Exercises")
                        .HasForeignKey("TopicID");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("API.Models.Leaderboard", b =>
                {
                    b.HasOne("API.Models.User", "User")
                        .WithMany("Leaderboards")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Models.LearningProgress", b =>
                {
                    b.HasOne("API.Models.ExerciseCode", "Exercise")
                        .WithMany("LearningProgresses")
                        .HasForeignKey("ExerciseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.Quiz", "Quiz")
                        .WithMany("LearningProgresses")
                        .HasForeignKey("QuizID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.User", "User")
                        .WithMany("LearningProgresses")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");

                    b.Navigation("Quiz");

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Models.LearningResource", b =>
                {
                    b.HasOne("API.Models.Topic", "Topic")
                        .WithMany("LearningResources")
                        .HasForeignKey("TopicID");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("API.Models.Notification", b =>
                {
                    b.HasOne("API.Models.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Models.Quiz", b =>
                {
                    b.HasOne("API.Models.Topic", "Topic")
                        .WithMany("Quizzes")
                        .HasForeignKey("TopicID");

                    b.HasOne("API.Models.User", "User")
                        .WithMany("Quizzes")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Topic");

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Models.QuizQuestion", b =>
                {
                    b.HasOne("API.Models.Quiz", "Quiz")
                        .WithMany("Questions")
                        .HasForeignKey("QuizID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("API.Models.QuizSubmission", b =>
                {
                    b.HasOne("API.Models.QuizQuestion", "Question")
                        .WithMany("Submissions")
                        .HasForeignKey("QuestionID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("API.Models.Quiz", "Quiz")
                        .WithMany("Submissions")
                        .HasForeignKey("QuizID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.User", "User")
                        .WithMany("QuizSubmissions")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("Quiz");

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Models.SocialComment", b =>
                {
                    b.HasOne("API.Models.SocialPost", "SocialPost")
                        .WithMany("Comments")
                        .HasForeignKey("SocialPostID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.User", "User")
                        .WithMany("SocialComments")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("SocialPost");

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Models.SocialLike", b =>
                {
                    b.HasOne("API.Models.SocialPost", "SocialPost")
                        .WithMany("Likes")
                        .HasForeignKey("SocialPostID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("API.Models.User", null)
                        .WithMany("SocialLikes")
                        .HasForeignKey("UserId1");

                    b.Navigation("SocialPost");

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Models.SocialPost", b =>
                {
                    b.HasOne("API.Models.User", "User")
                        .WithMany("SocialPosts")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Models.StudentSkill", b =>
                {
                    b.HasOne("API.Models.Topic", "Topic")
                        .WithMany("StudentSkills")
                        .HasForeignKey("TopicID");

                    b.HasOne("API.Models.User", null)
                        .WithMany("Classes")
                        .HasForeignKey("UserId");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("API.Models.StudentSkillProgress", b =>
                {
                    b.HasOne("API.Models.StudentSkill", "Skill")
                        .WithMany("SkillProgresses")
                        .HasForeignKey("SkillID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.User", "User")
                        .WithMany("SkillProgresses")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Models.SubmissionCode", b =>
                {
                    b.HasOne("API.Models.ExerciseCode", "Exercise")
                        .WithMany("Submissions")
                        .HasForeignKey("ExerciseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.User", "User")
                        .WithMany("Submissions")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Models.UserDailyUsage", b =>
                {
                    b.HasOne("API.Models.User", "User")
                        .WithMany("UserDailyUsages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Models.UserQuestionHistory", b =>
                {
                    b.HasOne("API.Models.QuizQuestion", "Question")
                        .WithMany("QuestionHistories")
                        .HasForeignKey("QuestionID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("API.Models.StudentSkill", "Skill")
                        .WithMany("QuestionHistories")
                        .HasForeignKey("SkillID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.User", "User")
                        .WithMany("QuestionHistories")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("Skill");

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Models.Class", b =>
                {
                    b.Navigation("ClassQuizzes");

                    b.Navigation("Memberships");
                });

            modelBuilder.Entity("API.Models.ExerciseCode", b =>
                {
                    b.Navigation("LearningProgresses");

                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("API.Models.Quiz", b =>
                {
                    b.Navigation("ClassQuizzes");

                    b.Navigation("LearningProgresses");

                    b.Navigation("Questions");

                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("API.Models.QuizQuestion", b =>
                {
                    b.Navigation("QuestionHistories");

                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("API.Models.SocialPost", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Likes");
                });

            modelBuilder.Entity("API.Models.StudentSkill", b =>
                {
                    b.Navigation("QuestionHistories");

                    b.Navigation("SkillProgresses");
                });

            modelBuilder.Entity("API.Models.Topic", b =>
                {
                    b.Navigation("Exercises");

                    b.Navigation("LearningResources");

                    b.Navigation("Quizzes");

                    b.Navigation("StudentSkills");
                });

            modelBuilder.Entity("API.Models.User", b =>
                {
                    b.Navigation("ClassMemberships");

                    b.Navigation("Classes");

                    b.Navigation("Leaderboards");

                    b.Navigation("LearningProgresses");

                    b.Navigation("Notifications");

                    b.Navigation("QuestionHistories");

                    b.Navigation("QuizSubmissions");

                    b.Navigation("Quizzes");

                    b.Navigation("SkillProgresses");

                    b.Navigation("SocialComments");

                    b.Navigation("SocialLikes");

                    b.Navigation("SocialPosts");

                    b.Navigation("Submissions");

                    b.Navigation("UserDailyUsages");
                });
#pragma warning restore 612, 618
        }
    }
}
